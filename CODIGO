#VICTOR ALEJANDRO SALAZAR HERNANDEZ
#PRACTICA 9

import cv2
import numpy as np

imag = cv2.imread("ima2.png")
image = cv2.resize(imag, (550, 700))
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Inv suavisador gausiano

# Para seleccionar el Template
ROI = cv2.selectROI(image)
print("Recorte es de: ", ROI)
# Pizarra_cropped
recorte = image[int(ROI[1]):int(ROI[1]+ROI[3]),int(ROI[0]):int(ROI[0]+ROI[2])]
cv2.imshow('Imagen Recortada', recorte)
cv2.waitKey(0)

template = recorte # <---------------- Template
template_gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)
w, h = template_gray.shape[::-1]

res = cv2.matchTemplate(image_gray, template_gray, cv2.TM_CCOEFF_NORMED)
Umbral = 0.85
loc = np.where(res >= Umbral)

for Cont in zip(*loc[::-1]):
    cv2.rectangle(image, Cont, (Cont[0] + w, Cont[1] + h), (0, 0, 255), 2)
cv2.imwrite('Holis.png', image)
cv2.imshow("Imagen Original", image)
cv2.imshow("Template", template)
cv2.waitKey(0)
cv2.destroyAllWindows()
# 

############

# _________________________________________________________________

'''
# Detectar un solo template

import cv2
import numpy as np

imag = cv2.imread("Aves.png")
image = cv2.resize(imag, (500, 700))

ROI = cv2.selectROI(image)
print("Recorte es de: ", ROI)
# Pizarra_cropped
recorte = image[int(ROI[1]):int(ROI[1]+ROI[3]),
                    int(ROI[0]):int(ROI[0]+ROI[2])]

cv2.imshow('Imagen Recortada', recorte)
cv2.waitKey(0)

template = recorte
image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
template_gray = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)

res = cv2.matchTemplate(image_gray, template_gray, cv2.TM_SQDIFF)
print('Res -> ', res)
min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
print(min_val, max_val, min_loc, max_loc)

x1, y1 = min_loc
x2, y2 = min_loc[0] + template.shape[1], min_loc[1] + template.shape[0]

cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 5)
cv2.imshow("Image", image)
cv2.waitKey(0)
cv2.destroyAllWindows()
'''
